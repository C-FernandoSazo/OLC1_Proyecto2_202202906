/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,21],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,13],$V8=[1,14],$V9=[1,26],$Va=[1,20],$Vb=[1,18],$Vc=[1,19],$Vd=[1,27],$Ve=[1,28],$Vf=[1,29],$Vg=[1,30],$Vh=[1,32],$Vi=[1,33],$Vj=[2,5,18,23,24,25,26,27,33,34,51,52,57,58,60,64,65,66,67,68,69,70,72,73],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,46],$Vs=[1,47],$Vt=[1,48],$Vu=[1,49],$Vv=[1,50],$Vw=[1,51],$Vx=[1,52],$Vy=[8,28,29,30,31,32,41,42,43,44,45,46,47,49,50],$Vz=[2,67],$VA=[1,58],$VB=[1,59],$VC=[8,17,20,28,29,30,31,32,35,41,42,43,44,45,46,47,48,49,50,53],$VD=[18,19,35],$VE=[1,66],$VF=[8,16,17],$VG=[1,90],$VH=[8,17,20,28,29,35,41,42,43,44,45,46,47,48,49,50,53],$VI=[8,17,20,28,29,30,31,35,41,42,43,44,45,46,47,48,49,50,53],$VJ=[8,17,20,35,41,42,43,44,45,46,47,48,49,50,53],$VK=[8,17,20,35,48,49,50,53],$VL=[2,68],$VM=[1,109],$VN=[1,124],$VO=[1,129],$VP=[2,5,18,23,24,25,26,27,33,34,51,52,57,58,59,60,64,65,66,67,68,69,70,72,73],$VQ=[57,64,66],$VR=[1,143],$VS=[17,20],$VT=[2,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"entrada":4,"EOF":5,"sentencia":6,"declaracion_variable":7,"PUNTOYCOMA":8,"declaracion_array":9,"expresion":10,"sent_if":11,"sent_switch":12,"print":13,"tipo":14,"lista_ids":15,"IGUAL":16,"COMA":17,"ID":18,"OPENCORCHETE":19,"CLOSECORCHETE":20,"NEW":21,"lista_values":22,"INT":23,"DOUBLE":24,"BOOL":25,"CHAR":26,"STD":27,"SUMA":28,"RES":29,"MULT":30,"DIV":31,"MOD":32,"POW":33,"OPENPAREN":34,"CLOSEPAREN":35,"INCREASE":36,"DECREASE":37,"op_relacional":38,"op_logicos":39,"valor":40,"ORIGUAL":41,"ORDIF":42,"ORMENOR":43,"ORMENORIGUAL":44,"ORMAYOR":45,"ORMAYORIGUAL":46,"INCOGNITA":47,"PUNTOS":48,"AND":49,"OR":50,"NOT":51,"COUT":52,"ASIGN":53,"ENDL":54,"bloque":55,"OPENLLAVE":56,"CLOSELLAVE":57,"IF":58,"ELSE":59,"SWITCH":60,"cases_list":61,"default_case":62,"case_statement":63,"CASE":64,"BREAK":65,"DEFAULT":66,"ENTERO":67,"DECIMAL":68,"CADENA":69,"CARACTER":70,"booleano":71,"TRUE":72,"FALSE":73,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOYCOMA",16:"IGUAL",17:"COMA",18:"ID",19:"OPENCORCHETE",20:"CLOSECORCHETE",21:"NEW",23:"INT",24:"DOUBLE",25:"BOOL",26:"CHAR",27:"STD",28:"SUMA",29:"RES",30:"MULT",31:"DIV",32:"MOD",33:"POW",34:"OPENPAREN",35:"CLOSEPAREN",36:"INCREASE",37:"DECREASE",41:"ORIGUAL",42:"ORDIF",43:"ORMENOR",44:"ORMENORIGUAL",45:"ORMAYOR",46:"ORMAYORIGUAL",47:"INCOGNITA",48:"PUNTOS",49:"AND",50:"OR",51:"NOT",52:"COUT",53:"ASIGN",54:"ENDL",56:"OPENLLAVE",57:"CLOSELLAVE",58:"IF",59:"ELSE",60:"SWITCH",64:"CASE",65:"BREAK",66:"DEFAULT",67:"ENTERO",68:"DECIMAL",69:"CADENA",70:"CARACTER",72:"TRUE",73:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[7,2],[7,4],[15,3],[15,1],[9,10],[9,15],[9,8],[9,16],[9,6],[9,9],[14,1],[14,1],[14,1],[14,1],[14,1],[10,3],[10,3],[10,3],[10,3],[10,3],[10,6],[10,2],[10,2],[10,4],[10,1],[10,1],[10,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,5],[39,3],[39,3],[39,2],[13,3],[13,5],[55,3],[55,2],[11,5],[11,7],[11,7],[12,7],[12,8],[61,2],[61,1],[63,4],[63,6],[62,3],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,4],[40,7],[22,3],[22,1],[71,1],[71,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Entrada procesada con Ã©xito."); retorno = { instrucciones: $$[$0-1], errores: errores  }; 
                        errores = []; return retorno; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 3:
 this.$=[$$[$0]]; 
break;
case 4: case 5: case 6: case 9: case 50:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 35: case 36: case 37:
 this.$ = $$[$0]; 
break;
case 10:
 console.log("Error al procesar la entrada."); 
    errores.push({tipo: "Sintactico", error: $$[$0-1], linea: this._$.first_line, columna : this._$.first_column}); 
break;
case 11:
 this.$ = instance_var($$[$0], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 12:
 this.$ = instance_var($$[$0-2], $$[$0-3], this._$.first_line, this._$.first_column, $$[$0]); 
break;
case 13: case 70:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 14: case 58: case 71:
 this.$ = [$$[$0]]; 
break;
case 15:

        this.$ = instance_array($$[$0-8], $$[$0-9], $$[$0-1], null, null, null, this._$.first_line, this._$.first_column+1, false);
    
break;
case 16:

        this.$ = instance_array($$[$0-13], $$[$0-14], $$[$0-4], null, $$[$0-1], null, this._$.first_line, this._$.first_column+1, true);
    
break;
case 17:

        this.$ = instance_array($$[$0-6], $$[$0-7], null, $$[$0-1], null, null, this._$.first_line, this._$.first_column+1, false);
    
break;
case 18:

        this.$ = instance_array($$[$0-14], $$[$0-15], null, $$[$0-6], null, $$[$0-2], this._$.first_line, this._$.first_column+1, true);
    
break;
case 19:
 this.$ = modify_array($$[$0-5], $$[$0], $$[$0-3]) 
break;
case 20:
 this.$ = modify_array($$[$0-8], $$[$0], $$[$0-6], $$[$0-3]) 
break;
case 21:
 this.$ = 'ENTERO'; 
break;
case 22:
 this.$ = 'DOUBLE'; 
break;
case 23:
 this.$ = 'BOOL'; 
break;
case 24:
 this.$ = 'CHAR'; 
break;
case 25:
 this.$ = 'CADENA'; 
break;
case 26:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'SUMA', this._$.first_line, this._$.first_column+1) 
break;
case 27:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'RESTA', this._$.first_line, this._$.first_column+1) 
break;
case 28:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MULT', this._$.first_line, this._$.first_column+1) 
break;
case 29:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'DIV', this._$.first_line, this._$.first_column+1) 
break;
case 30:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MOD', this._$.first_line, this._$.first_column+1) 
break;
case 31:
 this.$ = nuevaOpBinaria($$[$0-5], $$[$0-3], 'POW', this._$.first_line, this._$.first_column+1) 
break;
case 32: case 33:
 
break;
case 34:
 this.$ = casteo($$[$0-2],$$[$0]); 
break;
case 38:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'IGUALACION', this._$.first_line, this._$.first_column+1) 
break;
case 39:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'DIF', this._$.first_line, this._$.first_column+1) 
break;
case 40:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MENORQUE', this._$.first_line, this._$.first_column+1) 
break;
case 41:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MENORIGUALQUE', this._$.first_line, this._$.first_column+1) 
break;
case 42:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MAYORQUE', this._$.first_line, this._$.first_column+1) 
break;
case 43:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MAYORIGUALQUE', this._$.first_line, this._$.first_column+1) 
break;
case 44:
 var result = OpTernario(nuevaOpTernaria($$[$0-4], $$[$0-2], $$[$0], 'IFSHORT', this._$.first_line, this._$.first_column+1)) 
                                                                this.$ = nuevoValor(result.valor, result.tipo, this._$.first_line, this._$.first_column+1)
break;
case 45:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'AND', this._$.first_line, this._$.first_column+1) 
break;
case 46:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'OR', this._$.first_line, this._$.first_column+1) 
break;
case 47:
 this.$ = nuevaOpBinaria($$[$0], null, 'NOT', this._$.first_line, this._$.first_column+1) 
break;
case 48:
 this.$ = nuevaOpUnit($$[$0],'PRINT',this._$.first_line, this._$.first_column+1) 
break;
case 49:
 this.$ = nuevaOpUnit($$[$0-2],'PRINT',this._$.first_line, this._$.first_column+1,true) 
break;
case 51:
 this.$ = []; 
break;
case 52:
 this.$ = sentenciaControl($$[$0-2], 'sent_if', $$[$0]) 
break;
case 53: case 54:
 this.$ = sentenciaControl($$[$0-4], 'sent_if',$$[$0-2], $$[$0]) 
break;
case 55:
 this.$ = sentenciaControl($$[$0-4], 'sent_switch', $$[$0-1])
break;
case 56:
 this.$ = sentenciaControl($$[$0-5], 'sent_switch', $$[$0-2], $$[$0-1]) 
break;
case 57:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 59:
 this.$ = { case: $$[$0-2], bloque: $$[$0], breakval: false} 
break;
case 60:
 this.$ = { case: $$[$0-4], bloque: $$[$0-2], breakval: true} 
break;
case 61:
 this.$ = { case: 'DEFAULT', bloque: $$[$0] } 
break;
case 62:
 this.$ = nuevoValor($$[$0], 'ENTERO', this._$.first_line, this._$.first_column+1) 
break;
case 63:
 this.$ = nuevoValor($$[$0], 'DOUBLE', this._$.first_line, this._$.first_column+1) 
break;
case 64:
 this.$ = nuevoValor($$[$0], 'CADENA', this._$.first_line, this._$.first_column+1) 
break;
case 65:
 this.$ = nuevoValor($$[$0], 'CHAR', this._$.first_line, this._$.first_column+1) 
break;
case 66:
 this.$ = nuevoValor($$[$0], 'BOOL', this._$.first_line, this._$.first_column+1) 
break;
case 67:
 this.$ = nuevoValor($$[$0], 'ID', this._$.first_line, this._$.first_column+1) 
break;
case 68:
 this.$ = nuevoValor($$[$0-3], 'ARRAY', this._$.first_line, this._$.first_column+1, $$[$0-1]) 
break;
case 69:
 this.$ = nuevoValor($$[$0-6], 'ARRAY', this._$.first_line, this._$.first_column+1, $$[$0-4], $$[$0-1])
break;
case 72:
 this.$ = true;   
break;
case 73:
 this.$ = false;  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:11,18:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,52:$Va,58:$Vb,60:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:11,18:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,52:$Va,58:$Vb,60:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o($Vj,[2,3]),{8:[1,36]},{8:[1,37]},{8:[1,38],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},o($Vj,[2,7]),o($Vj,[2,8]),{8:[1,53]},{8:[1,54]},{15:55,18:[1,56]},o($Vy,$Vz,{19:[1,57],36:$VA,37:$VB}),{34:[1,60]},{14:61,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6},o($VC,[2,35]),o($VC,[2,36]),o($VC,[2,37]),{34:[1,62]},{34:[1,63]},{53:[1,64]},o($VD,[2,21]),o($VD,[2,22]),o($VD,[2,23]),o($VD,[2,24]),o($VD,[2,25]),{10:65,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o($VC,[2,62]),o($VC,[2,63]),o($VC,[2,64]),o($VC,[2,65]),o($VC,[2,66]),o($VC,[2,72]),o($VC,[2,73]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),{10:67,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:68,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:69,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:70,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:71,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:72,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:73,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:74,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:75,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:76,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:77,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:78,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:79,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:80,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o($Vj,[2,9]),o($Vj,[2,10]),{8:[2,11],16:[1,81],17:[1,82]},o($VF,[2,14],{19:[1,83]}),{10:84,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o($VC,[2,32]),o($VC,[2,33]),{10:85,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{35:[1,86]},{10:87,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:88,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:89,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o([8,17,20,35,48,53],[2,47],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx}),o($VC,$Vz,{19:$VG,36:$VA,37:$VB}),o($VH,[2,26],{30:$Vm,31:$Vn,32:$Vo}),o($VH,[2,27],{30:$Vm,31:$Vn,32:$Vo}),o($VI,[2,28],{32:$Vo}),o($VI,[2,29],{32:$Vo}),o($VC,[2,30]),o($VJ,[2,38],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo}),o($VJ,[2,39],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo}),o($VJ,[2,40],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo}),o($VJ,[2,41],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo}),o($VJ,[2,42],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo}),o($VJ,[2,43],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo}),{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:[1,91],49:$Vw,50:$Vx},o($VK,[2,45],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv}),o([8,17,20,35,48,50,53],[2,46],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw}),{10:92,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{18:[1,93]},{20:[1,94]},{20:[1,95],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},{17:[1,96],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},{10:97,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,35:[1,98],41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,35:[1,99],41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},{8:[2,48],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx,53:[1,100]},{10:101,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:102,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{8:[2,12],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},o($VF,[2,13]),{16:[1,103],19:[1,104]},o($Vy,$VL,{16:[1,105],19:[1,106]}),{10:107,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o($VC,[2,34]),{55:108,56:$VM},{56:[1,110]},{54:[1,111]},{20:[1,112],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},o($VK,[2,44],{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu}),{19:[1,114],21:[1,113]},{20:[1,115]},{10:116,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:117,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,35:[1,118],41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},o($Vj,[2,52],{59:[1,119]}),{2:$V0,4:120,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:11,18:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,52:$Va,57:[1,121],58:$Vb,60:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{61:122,63:123,64:$VN},{8:[2,49]},o($VC,$VL,{19:[1,125]}),{14:126,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6},{18:$VO,22:127,40:128,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{16:[1,130]},{8:[2,19],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},{20:[1,131],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},o($VC,[2,31]),{11:133,55:132,56:$VM,58:$Vb},{2:$V0,6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:11,18:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,52:$Va,57:[1,134],58:$Vb,60:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o($VP,[2,51]),{57:[1,135],62:136,63:137,64:$VN,66:[1,138]},o($VQ,[2,58]),{10:139,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{10:140,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{19:[1,141]},{17:$VR,20:[1,142]},o($VS,[2,71]),o($VS,$Vz,{19:$VG}),{19:[1,145],21:[1,144]},o($Vy,$VT,{16:[1,146]}),o($Vj,[2,53]),o($Vj,[2,54]),o($VP,[2,50]),o($Vj,[2,55]),{57:[1,147]},o($VQ,[2,57]),{48:[1,148]},{28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:[1,149],49:$Vw,50:$Vx},{20:[1,150],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},{10:151,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{8:[2,17]},{18:$VO,40:152,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{14:153,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6},{19:[1,154]},{10:155,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o($Vj,[2,56]),{2:$V0,4:156,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:11,18:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,52:$Va,58:$Vb,60:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{2:$V0,4:157,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:11,18:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,52:$Va,58:$Vb,60:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o($VC,$VT),{20:[1,158],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},o($VS,[2,70]),{19:[1,159]},{18:$VO,22:160,40:128,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{8:[2,20],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},{2:$V0,6:35,7:4,9:5,10:6,11:7,12:8,13:9,14:11,18:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,52:$Va,57:[2,61],58:$Vb,60:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},o($VQ,[2,59],{7:4,9:5,10:6,11:7,12:8,13:9,14:11,38:15,39:16,40:17,71:31,6:35,2:$V0,18:$V1,23:$V2,24:$V3,25:$V4,26:$V5,27:$V6,33:$V7,34:$V8,51:$V9,52:$Va,58:$Vb,60:$Vc,65:[1,161],67:$Vd,68:$Ve,69:$Vf,70:$Vg,72:$Vh,73:$Vi}),{8:[2,15]},{10:162,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{17:$VR,20:[1,163]},{8:[1,164]},{20:[1,165],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},{17:[1,166]},o($VQ,[2,60]),{19:[1,167]},{19:[1,168]},{10:169,18:$VE,33:$V7,34:$V8,38:15,39:16,40:17,51:$V9,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{18:$VO,22:170,40:128,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:31,72:$Vh,73:$Vi},{20:[1,171],28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,49:$Vw,50:$Vx},{17:$VR,20:[1,172]},{8:[2,16]},{20:[1,173]},{8:[2,18]}],
defaultActions: {34:[2,1],111:[2,49],142:[2,17],158:[2,15],171:[2,16],173:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // Importar librerÃ­as y variables
        const Aritmetica = require("../Util/Aritmetica");
        const OpRelacional = require('../Util/Comparaciones/Relacionales');
        const OpTernario = require('../Util/Comparaciones/Ternario');
        var cadena = '';
        var errores = [];


    function nuevoValor(valor, tipoValor, linea, columna, pos1=null, pos2=null) {
        let obj = {
            valor: valor,
            tipoValor: tipoValor,
            linea: linea,
            columna: columna,
            pos1: pos1,
            pos2: pos2
        }
        return obj;
    }

    function nuevaOpUnit(valor,tipoOperacion,linea,columna,comodin=false){
        let obj = {
            valor: valor,
            tipoOperacion: tipoOperacion,
            comodin: comodin,
            linea: linea,
            columna: columna
        }
        return obj;
    }

    function nuevaOpBinaria(valor1, valor2, tipoOperacion, linea, columna) {
        let obj = {
            valor1: valor1,
            valor2: valor2,
            tipoOperacion: tipoOperacion,
            linea: linea,
            columna: columna
        }
        return obj;
    }

    function nuevaOpTernaria(condicion, expresion1, expresion2, tipoOperacion, linea, columna) {
        let obj = {
            condicion: condicion,
            expresion1: expresion1,
            expresion2: expresion2,
            tipoOperacion: tipoOperacion,
            linea: linea,
            columna: columna
        }
        return obj;
    }

    function sentenciaControl(condicion, tipoOperacion, bloque, elseblock=null) {
        let obj = {
            condicion: condicion,
            tipoOperacion: tipoOperacion,
            bloque: bloque,
            elseblock: elseblock
        }
        return obj;
    }

    function instance_var(ids, tipo, linea, columna, valor = null){
        let obj = {
            ids: ids,
            tipo: tipo,
            valor: valor,
            tipoOperacion: "declaracion_var",
            linea: linea,
            columna: columna
        }
        return obj
    }

    function instance_array(id, tipo, size, valores, size2, valores2, fila, columna, cuadrada){
        let obj = {
            id: id,
            tipo: tipo,
            size: size,
            valores: valores,
            size2: size2,
            valores2: valores2,
            tipoOperacion: 'declaracion_array',
            fila: fila,
            columna: columna,
            cuadrada: cuadrada
        }
        return obj;
    }

    function modify_array(id, valor, pos1, pos2=null){
        let obj = {
            id: id,
            valor: valor,
            tipoOperacion: 'modify_array',
            pos1: pos1,
            pos2: pos2
        }
        return obj;
    }

    function casteo(tipo, valor) {
        if (tipo === 'DOUBLE' && valor.tipoValor === 'ENTERO'){
            valor.valor = valor.valor + 0.0
            return valor;
        }
        else if (tipo === 'ENTERO' && valor.tipoValor === 'DOUBLE'){
            valor.valor = Math.round(valor.valor);
            return valor;
        }
        else if (tipo === 'STRING' && typeof valor == 'number'){
            valor.valor.toString();
            return valor;
        }
        else if (tipo === 'CHAR' && valor.tipoValor === 'ENTERO'){
            valor.valor = String.fromCharCode(valor.valor)
            return valor
        }
        else if (tipo === 'ENTERO' && valor.tipoValor === 'CHAR'){
            valor.valor = valor.valor.charCodeAt(0);
            return valor
        }
        else if (tipo === 'DOUBLE' && valor.tipoValor === 'CHAR'){
            valor.valor = valor.valor.charCodeAt(0) + 0.0;
            return valor
        }
        else {
            return undefined;
        }
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios en blanco
break;
case 1:   
break;
case 2:   
break;
case 3: console.log("ENTRO A DOBLE IGUAL"); return 41; 
break;
case 4: return 42; 
break;
case 5: return 44; 
break;
case 6: return 46; 
break;
case 7: return 50; 
break;
case 8: return 49; 
break;
case 9: return 51; 
break;
case 10: return 53; 
break;
case 11: return 36; 
break;
case 12: return 37; 
break;
case 13: return 23; 
break;
case 14: return 24; 
break;
case 15: return 25; 
break;
case 16: return 26; 
break;
case 17: return 27; 
break;
case 18: return 16; 
break;
case 19: return 48 
break;
case 20: return 72; 
break;
case 21: return 73; 
break;
case 22: return 17; 
break;
case 23: return 8; 
break;
case 24: return 28; 
break;
case 25: return 29; 
break;
case 26: return 30; 
break;
case 27: return 31; 
break;
case 28: return 32; 
break;
case 29: return 33; 
break;
case 30: return 34; 
break;
case 31: return 35; 
break;
case 32: return 43; 
break;
case 33: return 45; 
break;
case 34: return 56; 
break;
case 35: return 57; 
break;
case 36: return 19; 
break;
case 37: return 20; 
break;
case 38: return 47; 
break;
case 39: return 52; 
break;
case 40: return 54; 
break;
case 41: return 58; 
break;
case 42: return 59; 
break;
case 43: return 21; 
break;
case 44: return 60; 
break;
case 45: return 64; 
break;
case 46: return 66; 
break;
case 47: return 65; 
break;
case 48: console.log('Token: ID, Valor: ' + yy_.yytext); return 18; 
break;
case 49: console.log('Token: DECIMAL, Valor: ' + yy_.yytext); return 68; 
break;
case 50: console.log('Token: ENTERO, Valor: ' + yy_.yytext); return 67; 
break;
case 51: cadena = ''; this.begin("string"); 
break;
case 52: cadena += yy_.yytext; 
break;
case 53: cadena += "\""; 
break;
case 54: cadena += "\n"; 
break;
case 55: cadena += " "; 
break;
case 56: cadena += "\t"; 
break;
case 57: cadena += "\\"; 
break;
case 58: cadena += "\'"; 
break;
case 59: cadena += "\r"; 
break;
case 60: yy_.yytext = cadena; this.popState(); console.log('Token: CADENA, Valor: ' + yy_.yytext); return 69; 
break;
case 61: this.begin("character"); 
break;
case 62: return 70;
break;
case 63: return 70; 
break;
case 64: return 70; 
break;
case 65: return 70; 
break;
case 66: return 70; 
break;
case 67: this.popState(); 
break;
case 68:return 5;
break;
case 69:  errores.push({tipo: "Lexico", error: 'El simbolo "'+yy_.yytext+'" no pertenece al lenguaje', linea: yy_.yylloc.first_line, columna : yy_.yylloc.first_column+1})  
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:<<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:=)/i,/^(?::)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:pow\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:<)/i,/^(?:>)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:new\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:['])/i,/^(?:\\x[0-9a-fA-F]{2})/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\r)/i,/^(?:[^\\\'])/i,/^(?:')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[52,53,54,55,56,57,58,59,60],"inclusive":false},"character":{"rules":[62,63,64,65,66,67],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}