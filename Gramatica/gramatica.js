/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,15],$V2=[1,16],$V3=[1,18],$V4=[1,22],$V5=[1,38],$V6=[1,39],$V7=[1,40],$V8=[1,41],$V9=[1,42],$Va=[1,20],$Vb=[1,21],$Vc=[1,48],$Vd=[1,37],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,36],$Vl=[1,35],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,52],$Vv=[1,54],$Vw=[1,55],$Vx=[2,5,19,21,31,32,38,39,40,41,42,44,48,63,64,68,69,70,71,72,74,78,79,80,81,82,85,86,87,90,91,93,94,95,96,98,99],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,64],$VC=[1,65],$VD=[1,66],$VE=[1,67],$VF=[1,68],$VG=[1,69],$VH=[1,70],$VI=[1,71],$VJ=[1,72],$VK=[1,73],$VL=[1,74],$VM=[9,43,44,45,46,47,53,54,55,56,57,58,59,61,62,88],$VN=[2,105],$VO=[1,82],$VP=[1,80],$VQ=[1,81],$VR=[1,90],$VS=[9,25,27,34,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,65],$VT=[2,54],$VU=[1,93],$VV=[2,74],$VW=[1,100],$VX=[19,26,34],$VY=[9,25,27,34,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,65,88],$VZ=[9,20,25],$V_=[2,21],$V$=[1,133],$V01=[9,25,27,34,43,44,53,54,55,56,57,58,59,60,61,62,65],$V11=[9,25,27,34,43,44,45,46,53,54,55,56,57,58,59,60,61,62,65],$V21=[9,25,27,34,53,54,55,56,57,58,59,60,61,62,65],$V31=[9,25,27,34,60,61,62,65],$V41=[25,34],$V51=[2,5,19,21,31,32,38,39,40,41,42,44,48,63,64,68,69,70,71,72,73,74,78,79,80,81,82,85,86,87,90,91,93,94,95,96,98,99],$V61=[2,106],$V71=[1,189],$V81=[1,217],$V91=[1,224],$Va1=[68,78,79],$Vb1=[2,107],$Vc1=[1,246],$Vd1=[25,27];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"entrada":4,"EOF":5,"sentencia":6,"declaracion_functions":7,"declaracion_variable":8,"PUNTOYCOMA":9,"declaracion_array":10,"expresion":11,"sent_transf":12,"sent_if":13,"sent_switch":14,"sent_while":15,"sent_for":16,"sent_dowhile":17,"print":18,"ID":19,"IGUAL":20,"EXECUTE":21,"llamada":22,"tipo":23,"lista_ids":24,"COMA":25,"OPENCORCHETE":26,"CLOSECORCHETE":27,"NEW":28,"native_function":29,"lista_values":30,"VOID":31,"OPENPAREN":32,"parametros":33,"CLOSEPAREN":34,"bloque":35,"comb_parametros":36,"lista_expresion":37,"INT":38,"DOUBLE":39,"BOOL":40,"CHAR":41,"STD":42,"SUMA":43,"RES":44,"MULT":45,"DIV":46,"MOD":47,"POW":48,"actualizacion":49,"op_relacional":50,"op_logicos":51,"valor":52,"ORIGUAL":53,"ORDIF":54,"ORMENOR":55,"ORMENORIGUAL":56,"ORMAYOR":57,"ORMAYORIGUAL":58,"INCOGNITA":59,"PUNTOS":60,"AND":61,"OR":62,"NOT":63,"COUT":64,"ASIGN":65,"ENDL":66,"OPENLLAVE":67,"CLOSELLAVE":68,"BREAK":69,"CONTINUE":70,"RETURN":71,"IF":72,"ELSE":73,"SWITCH":74,"cases_list":75,"default_case":76,"case_statement":77,"CASE":78,"DEFAULT":79,"WHILE":80,"DO":81,"FOR":82,"INCREASE":83,"DECREASE":84,"TOLOWER":85,"TOUPPER":86,"ROUND":87,"PUNTO":88,"LENGTH":89,"TYPEOF":90,"STS":91,"CSTR":92,"ENTERO":93,"DECIMAL":94,"CADENA":95,"CARACTER":96,"booleano":97,"TRUE":98,"FALSE":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PUNTOYCOMA",19:"ID",20:"IGUAL",21:"EXECUTE",25:"COMA",26:"OPENCORCHETE",27:"CLOSECORCHETE",28:"NEW",31:"VOID",32:"OPENPAREN",34:"CLOSEPAREN",38:"INT",39:"DOUBLE",40:"BOOL",41:"CHAR",42:"STD",43:"SUMA",44:"RES",45:"MULT",46:"DIV",47:"MOD",48:"POW",53:"ORIGUAL",54:"ORDIF",55:"ORMENOR",56:"ORMENORIGUAL",57:"ORMAYOR",58:"ORMAYORIGUAL",59:"INCOGNITA",60:"PUNTOS",61:"AND",62:"OR",63:"NOT",64:"COUT",65:"ASIGN",66:"ENDL",67:"OPENLLAVE",68:"CLOSELLAVE",69:"BREAK",70:"CONTINUE",71:"RETURN",72:"IF",73:"ELSE",74:"SWITCH",78:"CASE",79:"DEFAULT",80:"WHILE",81:"DO",82:"FOR",83:"INCREASE",84:"DECREASE",85:"TOLOWER",86:"TOUPPER",87:"ROUND",88:"PUNTO",89:"LENGTH",90:"TYPEOF",91:"STS",92:"CSTR",93:"ENTERO",94:"DECIMAL",95:"CADENA",96:"CARACTER",98:"TRUE",99:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,4],[6,3],[6,2],[8,2],[8,4],[24,3],[24,1],[10,10],[10,6],[10,15],[10,8],[10,16],[10,6],[10,9],[7,6],[7,5],[7,6],[7,5],[33,3],[33,1],[36,4],[36,2],[22,4],[22,3],[23,1],[23,1],[23,1],[23,1],[23,1],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,6],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[37,3],[37,1],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,5],[51,3],[51,3],[51,2],[18,3],[18,5],[35,3],[35,2],[12,1],[12,1],[12,1],[12,2],[13,5],[13,7],[13,7],[14,7],[14,8],[75,2],[75,1],[77,4],[77,5],[76,3],[15,5],[17,6],[16,9],[49,2],[49,2],[29,4],[29,4],[29,4],[29,5],[29,4],[29,4],[29,5],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,4],[52,7],[30,3],[30,1],[97,1],[97,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Entrada procesada con Ã©xito."); retorno = { instrucciones: $$[$0-1] }; return retorno; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 3:
 this.$=[$$[$0]]; 
break;
case 4: case 9: case 10: case 11: case 12: case 52: case 53: case 54: case 55: case 56: case 57:
 this.$ = $$[$0]; 
break;
case 5: case 6: case 7: case 8: case 13: case 14: case 72:
 this.$ = $$[$0-1]; 
break;
case 15:
 this.$ = asignarValor($$[$0-3], $$[$0-1]); 
break;
case 16:
 $$[$0-1].execute = true; this.$ = $$[$0-1]; 
break;
case 17:
 console.log("Error al procesar la entrada."); 
    global.reportes.agregarError({tipo: "Sintactico", error: $$[$0-1], linea: this._$.first_line, columna : this._$.first_column}); 
break;
case 18:
 this.$ = instance_var($$[$0], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 19:
 this.$ = instance_var($$[$0-2], $$[$0-3], this._$.first_line, this._$.first_column+1, $$[$0]); 
break;
case 20: case 58: case 108:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 21: case 34: case 59: case 84: case 109:
 this.$ = [$$[$0]]; 
break;
case 22:

        this.$ = instance_array($$[$0-8], $$[$0-9], $$[$0-1], null, null, null, this._$.first_line, this._$.first_column+1, false);
    
break;
case 23:

        this.$ = instance_array($$[$0-4], $$[$0-5], null, $$[$0], null, null, this._$.first_line, this._$.first_column+1, false);
    
break;
case 24:

        this.$ = instance_array($$[$0-13], $$[$0-14], $$[$0-4], null, $$[$0-1], null, this._$.first_line, this._$.first_column+1, true);
    
break;
case 25:

        this.$ = instance_array($$[$0-6], $$[$0-7], null, $$[$0-1], null, null, this._$.first_line, this._$.first_column+1, false);
    
break;
case 26:

        this.$ = instance_array($$[$0-14], $$[$0-15], null, $$[$0-6], null, $$[$0-2], this._$.first_line, this._$.first_column+1, true);
    
break;
case 27:
 this.$ = modify_array($$[$0-5], $$[$0], $$[$0-3]) 
break;
case 28:
 this.$ = modify_array($$[$0-8], $$[$0], $$[$0-6], $$[$0-3]) 
break;
case 29:
 this.$ = nuevaFunction($$[$0-4], $$[$0-2], $$[$0], "METODO", null) 
break;
case 30:
 this.$ = nuevaFunction($$[$0-3], null, $$[$0], "METODO", null) 
break;
case 31:
 this.$ = nuevaFunction($$[$0-4], $$[$0-2], $$[$0], "FUNCION", $$[$0-5]) 
break;
case 32:
 this.$ = nuevaFunction($$[$0-3], null, $$[$0], "FUNCION", $$[$0-4]) 
break;
case 33:
 this.$ = $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 35:
 this.$ = instance_array($$[$0-2], $$[$0-3], null, null, null, null, this._$.first_line, this._$.first_column+1, false); 
break;
case 36:
 this.$ = instance_var([$$[$0]], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 37:
 this.$ = newCall($$[$0-3], $$[$0-1], false)
break;
case 38:
 this.$ = newCall($$[$0-2], null, false)
break;
case 39:
 this.$ = 'ENTERO'; 
break;
case 40:
 this.$ = 'DOUBLE'; 
break;
case 41:
 this.$ = 'BOOL'; 
break;
case 42:
 this.$ = 'CHAR'; 
break;
case 43:
 this.$ = 'CADENA'; 
break;
case 44:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'SUMA', this._$.first_line, this._$.first_column+1) 
break;
case 45:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'RESTA', this._$.first_line, this._$.first_column+1) 
break;
case 46:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MULT', this._$.first_line, this._$.first_column+1) 
break;
case 47:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'DIV', this._$.first_line, this._$.first_column+1) 
break;
case 48:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MOD', this._$.first_line, this._$.first_column+1) 
break;
case 49:
 this.$ = nuevaOpBinaria($$[$0-1], null, 'NEGATIVO', this._$.first_line, this._$.first_column+1)
break;
case 50:
 this.$ = nuevaOpBinaria($$[$0-5], $$[$0-3], 'POW', this._$.first_line, this._$.first_column+1) 
break;
case 51:
 this.$ = nuevaOpUnit($$[$0], 'CASTEO', this._$.first_line, this._$.first_column+1, $$[$0-2]) 
break;
case 60:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'IGUALACION', this._$.first_line, this._$.first_column+1) 
break;
case 61:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'DIF', this._$.first_line, this._$.first_column+1) 
break;
case 62:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MENORQUE', this._$.first_line, this._$.first_column+1) 
break;
case 63:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MENORIGUALQUE', this._$.first_line, this._$.first_column+1) 
break;
case 64:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MAYORQUE', this._$.first_line, this._$.first_column+1) 
break;
case 65:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MAYORIGUALQUE', this._$.first_line, this._$.first_column+1) 
break;
case 66:
 this.$ = nuevaOpTernaria($$[$0-4], $$[$0-2], $$[$0], 'IFSHORT', this._$.first_line, this._$.first_column+1) 
break;
case 67:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'AND', this._$.first_line, this._$.first_column+1) 
break;
case 68:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'OR', this._$.first_line, this._$.first_column+1) 
break;
case 69:
 this.$ = nuevaOpBinaria($$[$0], null, 'NOT', this._$.first_line, this._$.first_column+1) 
break;
case 70:
 this.$ = nuevaOpUnit($$[$0],'PRINT',this._$.first_line, this._$.first_column+1) 
break;
case 71:
 this.$ = nuevaOpUnit($$[$0-2],'PRINT',this._$.first_line, this._$.first_column+1,true) 
break;
case 73:
 this.$ = []; 
break;
case 74:
 this.$ = nuevaOpUnit($$[$0], 'BREAK', this._$.first_line, this._$.first_column+1) 
break;
case 75:
 this.$ = nuevaOpUnit($$[$0], 'CONTINUE', this._$.first_line, this._$.first_column+1) 
break;
case 76:
 this.$ = nuevaOpUnit($$[$0], 'RETURN', this._$.first_line, this._$.first_column+1) 
break;
case 77:
 this.$ = nuevaOpUnit($$[$0-1], 'RETURN', this._$.first_line, this._$.first_column+1, $$[$0]) 
break;
case 78:
 this.$ = sentenciaControl($$[$0-2], 'sent_if', $$[$0]) 
break;
case 79: case 80:
 this.$ = sentenciaControl($$[$0-4], 'sent_if',$$[$0-2], $$[$0]) 
break;
case 81:
 this.$ = sentenciaControl($$[$0-4], 'sent_switch', $$[$0-1])
break;
case 82:
 this.$ = sentenciaControl($$[$0-5], 'sent_switch', $$[$0-2], $$[$0-1]) 
break;
case 83:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 85:
 this.$ = { case: $$[$0-2], bloque: $$[$0], breakval: false} 
break;
case 86:
 this.$ = { case: $$[$0-3], bloque: $$[$0-1], breakval: true} 
break;
case 87:
 this.$ = { case: 'DEFAULT', bloque: $$[$0] } 
break;
case 88:
 this.$ = sent_while($$[$0-2], $$[$0], 'sent_while') 
break;
case 89:
 this.$ = sent_while($$[$0-1], $$[$0-4], 'sent_dowhile') 
break;
case 90:
 this.$ = sent_for($$[$0-6], $$[$0-4], $$[$0-2], $$[$0]) 
break;
case 91:
 this.$ = nuevaOpUnit($$[$0-1], 'INCREASE', this._$.first_line, this._$.first_column+1) 
break;
case 92:
 this.$ = nuevaOpUnit($$[$0-1], 'DECREASE', this._$.first_line, this._$.first_column+1) 
break;
case 93:
 this.$ = nuevaOpUnit($$[$0-1], 'TOLOWER', this._$.first_line, this._$.first_column+1) 
break;
case 94:
 this.$ = nuevaOpUnit($$[$0-1], 'TOUPPER', this._$.first_line, this._$.first_column+1) 
break;
case 95:
 this.$ = nuevaOpUnit($$[$0-1], 'ROUND', this._$.first_line, this._$.first_column+1) 
break;
case 96:
 this.$ = nuevaOpUnit($$[$0-4], 'LENGTH', this._$.first_line, this._$.first_column+1) 
break;
case 97:
 this.$ = nuevaOpUnit($$[$0-1], 'TYPEOF', this._$.first_line, this._$.first_column+1) 
break;
case 98:
 this.$ = nuevaOpUnit($$[$0-1], 'TOSTRING', this._$.first_line, this._$.first_column+1) 
break;
case 99:
 this.$ = nuevaOpUnit($$[$0-4], 'CSTR', this._$.first_line, this._$.first_column+1) 
break;
case 100:
 this.$ = nuevoValor($$[$0], 'ENTERO', this._$.first_line, this._$.first_column+1) 
break;
case 101:
 this.$ = nuevoValor($$[$0], 'DOUBLE', this._$.first_line, this._$.first_column+1) 
break;
case 102:
 this.$ = nuevoValor($$[$0], 'CADENA', this._$.first_line, this._$.first_column+1) 
break;
case 103:
 this.$ = nuevoValor($$[$0], 'CHAR', this._$.first_line, this._$.first_column+1) 
break;
case 104:
 this.$ = nuevoValor($$[$0], 'BOOL', this._$.first_line, this._$.first_column+1) 
break;
case 105:
 this.$ = nuevoValor($$[$0], 'ID', this._$.first_line, this._$.first_column+1) 
break;
case 106:
 this.$ = nuevoValor($$[$0-3], 'ARRAY', this._$.first_line, this._$.first_column+1, $$[$0-1]) 
break;
case 107:
 this.$ = nuevoValor($$[$0-6], 'ARRAY', this._$.first_line, this._$.first_column+1, $$[$0-4], $$[$0-1])
break;
case 110:
 this.$ = true;   
break;
case 111:
 this.$ = false;  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:27,23:19,29:24,31:$V3,32:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,64:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,74:$Vi,80:$Vj,81:$Vk,82:$Vl,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{1:[3]},{2:$V0,5:[1,56],6:57,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:27,23:19,29:24,31:$V3,32:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,64:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,74:$Vi,80:$Vj,81:$Vk,82:$Vl,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($Vx,[2,3]),o($Vx,[2,4]),{9:[1,58]},{9:[1,59]},{9:[1,60],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{9:[1,75]},o($Vx,[2,9]),o($Vx,[2,10]),o($Vx,[2,11]),o($Vx,[2,12]),{9:[1,76]},{9:[1,77]},o($VM,$VN,{20:[1,78],26:[1,79],32:$VO,83:$VP,84:$VQ}),{19:[1,84],22:83},{9:[1,85]},{19:[1,86]},{19:[1,87],24:88},{11:89,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{32:[1,91]},{23:92,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},o($VS,[2,52]),o($VS,[2,53]),o($VS,$VT),o($VS,[2,55]),o($VS,[2,56]),o($VS,[2,57],{88:$VU}),{9:$VV},{9:[2,75]},{9:[2,76],11:94,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{32:[1,95]},{32:[1,96]},{32:[1,97]},{32:[1,98]},{35:99,67:$VW},{65:[1,101]},o($VX,[2,39]),o($VX,[2,40]),o($VX,[2,41]),o($VX,[2,42]),o($VX,[2,43]),{32:[1,102]},{32:[1,103]},{32:[1,104]},{32:[1,105]},{32:[1,106]},{11:107,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($VY,[2,100]),o($VY,[2,101]),o($VY,[2,102]),o($VY,[2,103]),o($VY,[2,104]),o($VY,[2,110]),o($VY,[2,111]),{1:[2,1]},o($Vx,[2,2]),o($Vx,[2,5]),o($Vx,[2,6]),o($Vx,[2,7]),{11:108,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:109,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:110,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:111,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:112,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:113,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:114,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:115,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:116,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:117,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:118,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:119,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:120,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:121,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($Vx,[2,8]),o($Vx,[2,13]),o($Vx,[2,14]),{11:122,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:123,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($VS,[2,91]),o($VS,[2,92]),{11:126,19:$VR,22:27,29:24,32:$V4,34:[1,125],37:124,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{9:[1,127]},{32:$VO},o($Vx,[2,17]),{32:[1,128]},o($VZ,$V_,{26:[1,130],32:[1,129]}),{9:[2,18],20:[1,131],25:[1,132]},o($VS,[2,49]),o($VY,$VN,{26:$V$,32:$VO,83:$VP,84:$VQ}),{11:134,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{34:[1,135]},{89:[1,136],92:[1,137]},{9:[2,77],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{11:138,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:139,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:140,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{8:141,23:142,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{80:[1,143]},{2:$V0,4:144,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:27,23:19,29:24,31:$V3,32:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,64:$Vd,68:[1,145],69:$Ve,70:$Vf,71:$Vg,72:$Vh,74:$Vi,80:$Vj,81:$Vk,82:$Vl,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:146,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:147,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:148,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:149,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:150,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:151,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o([9,25,27,34,60,65],[2,69],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL}),o($V01,[2,44],{45:$VA,46:$VB,47:$VC}),o($V01,[2,45],{45:$VA,46:$VB,47:$VC}),o($V11,[2,46],{47:$VC}),o($V11,[2,47],{47:$VC}),o($VS,[2,48]),o($V21,[2,60],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),o($V21,[2,61],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),o($V21,[2,62],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),o($V21,[2,63],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),o($V21,[2,64],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),o($V21,[2,65],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:[1,152],61:$VK,62:$VL},o($V31,[2,67],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ}),o([9,25,27,34,60,62,65],[2,68],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK}),{9:[1,153],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{27:[1,154],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{25:[1,156],34:[1,155]},o($VS,[2,38]),o($V41,[2,59],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL}),o($Vx,[2,16]),{23:160,33:157,34:[1,158],36:159,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{23:160,33:161,34:[1,162],36:159,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{27:[1,163]},{11:164,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{19:[1,165]},{11:166,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{25:[1,167],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{11:168,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{32:[1,169]},{32:[1,170]},{34:[1,171],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{34:[1,172],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{34:[1,173],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{9:[1,174]},{19:[1,175],24:88},{32:[1,176]},{2:$V0,6:57,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:27,23:19,29:24,31:$V3,32:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,64:$Vd,68:[1,177],69:$Ve,70:$Vf,71:$Vg,72:$Vh,74:$Vi,80:$Vj,81:$Vk,82:$Vl,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($V51,[2,73]),{9:[2,70],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL,65:[1,178]},{34:[1,179],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{34:[1,180],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{34:[1,181],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{34:[1,182],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{34:[1,183],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{11:184,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($Vx,[2,15]),o($VM,$V61,{20:[1,185],26:[1,186]}),o($VS,[2,37]),{11:187,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{25:$V71,34:[1,188]},{35:190,67:$VW},o($V41,[2,34]),{19:[1,191]},{25:$V71,34:[1,192]},{35:193,67:$VW},{20:[1,194],26:[1,195]},{9:[2,19],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},o($VZ,[2,20]),{27:[1,196],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{11:197,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($VS,[2,51]),{34:[1,198]},{34:[1,199]},{35:200,67:$VW},{67:[1,201]},{35:202,67:$VW},{11:204,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:203,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($VZ,$V_),{11:205,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($V51,[2,72]),{66:[1,206]},o($VS,[2,93]),o($VS,[2,94]),o($VS,[2,95]),o($VS,[2,97]),o($VS,[2,98]),o($V31,[2,66],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI}),{11:207,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:208,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($V41,[2,58],{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL}),{35:209,67:$VW},{23:160,36:210,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},o($Vx,[2,30]),o($V41,[2,36],{26:[1,211]}),{35:212,67:$VW},o($Vx,[2,32]),{19:$V81,26:[1,215],28:[1,213],29:214,52:216,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{27:[1,218]},o($VY,$V61,{26:[1,219]}),{34:[1,220],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},o($VS,[2,96]),o($VS,[2,99]),o($Vx,[2,78],{73:[1,221]}),{75:222,77:223,78:$V91},o($Vx,[2,88]),o([43,44,45,46,47,53,54,55,56,57,58,59,61,62],$VT,{9:[1,225]}),{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{34:[1,226],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{9:[2,71]},{9:[2,27],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{27:[1,227],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},o($Vx,[2,29]),o($V41,[2,33]),{27:[1,228]},o($Vx,[2,31]),{23:229,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{9:[2,23]},{19:$V81,30:230,52:231,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{88:$VU},o([25,27,88],$VN,{26:$V$}),{20:[1,232]},{11:233,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($VS,[2,50]),{13:235,35:234,67:$VW,72:$Vh},{68:[1,236],76:237,77:238,78:$V91,79:[1,239]},o($Va1,[2,84]),{11:240,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{19:[1,242],49:241},{9:[2,89]},o($VM,$Vb1,{20:[1,243]}),o($V41,[2,35]),{26:[1,244]},{25:$Vc1,27:[1,245]},o($Vd1,[2,109]),{26:[1,248],28:[1,247]},{27:[1,249],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},o($Vx,[2,79]),o($Vx,[2,80]),o($Vx,[2,81]),{68:[1,250]},o($Va1,[2,83]),{60:[1,251]},{43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:[1,252],61:$VK,62:$VL},{34:[1,253]},{83:$VP,84:$VQ},{11:254,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{11:255,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{9:[2,25]},{19:$V81,52:256,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{23:257,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9},{26:[1,258]},o($VY,$Vb1),o($Vx,[2,82]),{2:$V0,4:259,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:27,23:19,29:24,31:$V3,32:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,64:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,74:$Vi,80:$Vj,81:$Vk,82:$Vl,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{2:$V0,4:260,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:27,23:19,29:24,31:$V3,32:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,64:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,74:$Vi,80:$Vj,81:$Vk,82:$Vl,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{35:261,67:$VW},{9:[2,28],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{27:[1,262],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},o($Vd1,[2,108]),{26:[1,263]},{19:$V81,30:264,52:231,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{2:$V0,6:57,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,21:$V2,22:27,23:19,29:24,31:$V3,32:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,64:$Vd,68:[2,87],69:$Ve,70:$Vf,71:$Vg,72:$Vh,74:$Vi,80:$Vj,81:$Vk,82:$Vl,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},o($Va1,[2,85],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,23:19,49:23,29:24,50:25,51:26,22:27,52:28,97:53,6:57,2:$V0,19:$V1,21:$V2,31:$V3,32:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:$V9,44:$Va,48:$Vb,63:$Vc,64:$Vd,69:[1,265],70:$Vf,71:$Vg,72:$Vh,74:$Vi,80:$Vj,81:$Vk,82:$Vl,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,98:$Vv,99:$Vw}),o($Vx,[2,90]),{9:[2,22]},{11:266,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{25:$Vc1,27:[1,267]},o($Va1,[2,86],{9:$VV}),{27:[1,268],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{25:[1,269]},{26:[1,270]},{26:[1,271]},{11:272,19:$VR,22:27,29:24,32:$V4,44:$Va,48:$Vb,49:23,50:25,51:26,52:28,63:$Vc,85:$Vm,86:$Vn,87:$Vo,90:$Vp,91:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{19:$V81,30:273,52:231,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:53,98:$Vv,99:$Vw},{27:[1,274],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,61:$VK,62:$VL},{25:$Vc1,27:[1,275]},{9:[2,24]},{27:[1,276]},{9:[2,26]}],
defaultActions: {29:[2,74],30:[2,75],56:[2,1],206:[2,71],214:[2,23],226:[2,89],245:[2,25],262:[2,22],274:[2,24],276:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // Importar librerÃ­as y variables
        var cadena = '';


    function nuevoValor(valor, tipoValor, linea, columna, pos1=null, pos2=null) {
        let obj = {
            valor: valor,
            tipoValor: tipoValor,
            linea: linea,
            columna: columna,
            pos1: pos1,
            pos2: pos2
        }
        return obj;
    }

    function asignarValor(id, valor) {
        let obj = {
            id: id,
            valor: valor,
            tipoOperacion: "ASIGNACION"
        }
        return obj;
    }

    function nuevaOpUnit(valor,tipoOperacion,linea,columna,comodin=false){
        let obj = {
            valor: valor,
            tipoOperacion: tipoOperacion,
            comodin: comodin,
            linea: linea,
            columna: columna
        }
        return obj;
    }

    function nuevaOpBinaria(valor1, valor2, tipoOperacion, linea, columna) {
        let obj = {
            valor1: valor1,
            valor2: valor2,
            tipoOperacion: tipoOperacion,
            linea: linea,
            columna: columna
        }
        return obj;
    }

    function nuevaOpTernaria(condicion, expresion1, expresion2, tipoOperacion, linea, columna) {
        let obj = {
            condicion: condicion,
            expresion1: expresion1,
            expresion2: expresion2,
            tipoOperacion: tipoOperacion,
            linea: linea,
            columna: columna
        }
        return obj;
    }

    function nuevaFunction(id, parametros, instrucciones, tipoOperacion, retorno){
        let obj = {
            id: id,
            parametros: parametros, 
            instrucciones: instrucciones,
            tipoOperacion: tipoOperacion,
            retorno: retorno
        }
        return obj;
    }

    function newCall(id, parametros, execute) {
        let obj = {
            id: id,
            parametros: parametros,
            tipoOperacion: "CALL",
            execute: execute
        }
        return obj;
    }

    function sentenciaControl(condicion, tipoOperacion, bloque, elseblock=null) {
        let obj = {
            condicion: condicion,
            tipoOperacion: tipoOperacion,
            bloque: bloque,
            elseblock: elseblock
        }
        return obj;
    }

    function instance_var(ids, tipo, linea, columna, valor = null){
        let obj = {
            ids: ids,
            tipo: tipo,
            valor: valor,
            tipoOperacion: "declaracion_var",
            linea: linea,
            columna: columna
        }
        return obj
    }

    function instance_array(id, tipo, size, valores, size2, valores2, fila, columna, cuadrada){
        let obj = {
            id: id,
            tipo: tipo,
            size: size,
            valor: valores,
            size2: size2,
            valores2: valores2,
            tipoOperacion: 'declaracion_array',
            fila: fila,
            columna: columna,
            cuadrada: cuadrada
        }
        return obj;
    }

    function modify_array(id, valor, pos1, pos2=null){
        let obj = {
            id: id,
            valor: valor,
            tipoOperacion: 'modify_array',
            pos1: pos1,
            pos2: pos2
        }
        return obj;
    }

    function sent_while(condicion, instrucciones, tipoOperacion){
        let obj = {
            condicion: condicion,
            instrucciones: instrucciones,
            tipoOperacion: tipoOperacion
        }
        return obj;
    }

    function sent_for(declaracion, condicion, update, instrucciones){
        let obj = {
            declaracion: declaracion,
            condicion: condicion,
            update: update,
            tipoOperacion: 'sent_for',
            instrucciones: instrucciones
        }
        return obj;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios en blanco
break;
case 1:   
break;
case 2:   
break;
case 3: console.log("ENTRO A DOBLE IGUAL"); return 53; 
break;
case 4: return 54; 
break;
case 5: return 56; 
break;
case 6: return 58; 
break;
case 7: return 62; 
break;
case 8: return 61; 
break;
case 9: return 63; 
break;
case 10: return 65; 
break;
case 11: return 83; 
break;
case 12: return 84; 
break;
case 13: return 38; 
break;
case 14: return 39; 
break;
case 15: return 40; 
break;
case 16: return 41; 
break;
case 17: return 42; 
break;
case 18: return 91; 
break;
case 19: return 20; 
break;
case 20: return 60 
break;
case 21: return 98; 
break;
case 22: return 99; 
break;
case 23: return 25; 
break;
case 24: return 88; 
break;
case 25: return 9; 
break;
case 26: return 43; 
break;
case 27: return 44; 
break;
case 28: return 45; 
break;
case 29: return 46; 
break;
case 30: return 47; 
break;
case 31: return 48; 
break;
case 32: return 32; 
break;
case 33: return 34; 
break;
case 34: return 55; 
break;
case 35: return 57; 
break;
case 36: return 67; 
break;
case 37: return 68; 
break;
case 38: return 26; 
break;
case 39: return 27; 
break;
case 40: return 59; 
break;
case 41: return 64; 
break;
case 42: return 66; 
break;
case 43: return 72; 
break;
case 44: return 73; 
break;
case 45: return 28; 
break;
case 46: return 74; 
break;
case 47: return 78; 
break;
case 48: return 79; 
break;
case 49: return 69; 
break;
case 50: return 70; 
break;
case 51: return 71; 
break;
case 52: return 85; 
break;
case 53: return 86; 
break;
case 54: return 87; 
break;
case 55: return 89; 
break;
case 56: return 90; 
break;
case 57: return 92; 
break;
case 58: return 81; 
break;
case 59: return 80; 
break;
case 60: return 82; 
break;
case 61: return 31; 
break;
case 62: return 21; 
break;
case 63: console.log('Token: ID, Valor: ' + yy_.yytext); return 19; 
break;
case 64: console.log('Token: DECIMAL, Valor: ' + yy_.yytext); return 94; 
break;
case 65: console.log('Token: ENTERO, Valor: ' + yy_.yytext); return 93; 
break;
case 66: cadena = ''; this.begin("string"); 
break;
case 67: cadena += yy_.yytext; 
break;
case 68: cadena += "\""; 
break;
case 69: cadena += "\n"; 
break;
case 70: cadena += " "; 
break;
case 71: cadena += "\t"; 
break;
case 72: cadena += "\\"; 
break;
case 73: cadena += "\'"; 
break;
case 74: cadena += "\r"; 
break;
case 75: yy_.yytext = cadena; this.popState(); console.log('Token: CADENA, Valor: ' + yy_.yytext); return 95; 
break;
case 76: yy_.yytext=yy_.yytext.substr(1, yy_.yyleng-2); return 96 
break;
case 77:return 5;
break;
case 78:  global.reportes.agregarError({tipo: "Lexico", error: 'El simbolo "'+yy_.yytext+'" no pertenece al lenguaje', linea: yy_.yylloc.first_line, columna : yy_.yylloc.first_column+1})  
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:<<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:std::toString\b)/i,/^(?:=)/i,/^(?::)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:pow\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:<)/i,/^(?:>)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:new\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:c_str\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:execute\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[67,68,69,70,71,72,73,74,75],"inclusive":false},"character":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}