/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,15],$V2=[1,28],$V3=[1,29],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,16],$V8=[1,17],$V9=[1,33],$Va=[1,27],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,26],$Vf=[1,25],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,39],$Vl=[1,40],$Vm=[2,5,21,26,27,28,29,30,36,37,53,54,59,60,62,66,67,68,69,70,71,74,75,76,77,79,80],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[8,31,32,33,34,35,43,44,45,46,47,48,49,51,52],$VC=[2,74],$VD=[1,66],$VE=[1,67],$VF=[8,20,23,31,32,33,34,35,38,43,44,45,46,47,48,49,50,51,52,55],$VG=[2,37],$VH=[1,75],$VI=[21,22,38],$VJ=[1,78],$VK=[8,19,20],$VL=[2,17],$VM=[1,108],$VN=[8,20,23,31,32,38,43,44,45,46,47,48,49,50,51,52,55],$VO=[8,20,23,31,32,33,34,38,43,44,45,46,47,48,49,50,51,52,55],$VP=[8,20,23,38,43,44,45,46,47,48,49,50,51,52,55],$VQ=[8,20,23,38,50,51,52,55],$VR=[2,5,21,26,27,28,29,30,36,37,53,54,59,60,61,62,66,67,68,69,70,71,74,75,76,77,79,80],$VS=[2,75],$VT=[1,148],$VU=[1,155],$VV=[59,66,68],$VW=[1,170],$VX=[20,23],$VY=[2,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"entrada":4,"EOF":5,"sentencia":6,"declaracion_variable":7,"PUNTOYCOMA":8,"declaracion_array":9,"expresion":10,"sent_if":11,"sent_switch":12,"sent_while":13,"sent_for":14,"sent_dowhile":15,"print":16,"tipo":17,"lista_ids":18,"IGUAL":19,"COMA":20,"ID":21,"OPENCORCHETE":22,"CLOSECORCHETE":23,"NEW":24,"lista_values":25,"INT":26,"DOUBLE":27,"BOOL":28,"CHAR":29,"STD":30,"SUMA":31,"RES":32,"MULT":33,"DIV":34,"MOD":35,"POW":36,"OPENPAREN":37,"CLOSEPAREN":38,"actualizacion":39,"op_relacional":40,"op_logicos":41,"valor":42,"ORIGUAL":43,"ORDIF":44,"ORMENOR":45,"ORMENORIGUAL":46,"ORMAYOR":47,"ORMAYORIGUAL":48,"INCOGNITA":49,"PUNTOS":50,"AND":51,"OR":52,"NOT":53,"COUT":54,"ASIGN":55,"ENDL":56,"bloque":57,"OPENLLAVE":58,"CLOSELLAVE":59,"IF":60,"ELSE":61,"SWITCH":62,"cases_list":63,"default_case":64,"case_statement":65,"CASE":66,"BREAK":67,"DEFAULT":68,"WHILE":69,"DO":70,"FOR":71,"INCREASE":72,"DECREASE":73,"ENTERO":74,"DECIMAL":75,"CADENA":76,"CARACTER":77,"booleano":78,"TRUE":79,"FALSE":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOYCOMA",19:"IGUAL",20:"COMA",21:"ID",22:"OPENCORCHETE",23:"CLOSECORCHETE",24:"NEW",26:"INT",27:"DOUBLE",28:"BOOL",29:"CHAR",30:"STD",31:"SUMA",32:"RES",33:"MULT",34:"DIV",35:"MOD",36:"POW",37:"OPENPAREN",38:"CLOSEPAREN",43:"ORIGUAL",44:"ORDIF",45:"ORMENOR",46:"ORMENORIGUAL",47:"ORMAYOR",48:"ORMAYORIGUAL",49:"INCOGNITA",50:"PUNTOS",51:"AND",52:"OR",53:"NOT",54:"COUT",55:"ASIGN",56:"ENDL",58:"OPENLLAVE",59:"CLOSELLAVE",60:"IF",61:"ELSE",62:"SWITCH",66:"CASE",67:"BREAK",68:"DEFAULT",69:"WHILE",70:"DO",71:"FOR",72:"INCREASE",73:"DECREASE",74:"ENTERO",75:"DECIMAL",76:"CADENA",77:"CARACTER",79:"TRUE",80:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[7,2],[7,4],[18,3],[18,1],[9,10],[9,15],[9,8],[9,16],[9,6],[9,9],[17,1],[17,1],[17,1],[17,1],[17,1],[10,3],[10,3],[10,3],[10,3],[10,3],[10,6],[10,4],[10,1],[10,1],[10,1],[10,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,5],[41,3],[41,3],[41,2],[16,3],[16,5],[57,3],[57,2],[11,5],[11,7],[11,7],[12,7],[12,8],[63,2],[63,1],[65,4],[65,6],[64,3],[13,5],[15,6],[14,9],[39,2],[39,2],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,4],[42,7],[25,3],[25,1],[78,1],[78,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("Entrada procesada con Ã©xito."); retorno = { instrucciones: $$[$0-1], errores: errores  }; 
                        errores = []; return retorno; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 3:
 this.$=[$$[$0]]; 
break;
case 4: case 5: case 6: case 11: case 12: case 52:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 9: case 10: case 36: case 37: case 38: case 39:
 this.$ = $$[$0]; 
break;
case 13:
 console.log("Error al procesar la entrada."); 
    errores.push({tipo: "Sintactico", error: $$[$0-1], linea: this._$.first_line, columna : this._$.first_column}); 
break;
case 14:
 this.$ = instance_var($$[$0], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 15:
 this.$ = instance_var($$[$0-2], $$[$0-3], this._$.first_line, this._$.first_column, $$[$0]); 
break;
case 16: case 77:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 17: case 60: case 78:
 this.$ = [$$[$0]]; 
break;
case 18:

        this.$ = instance_array($$[$0-8], $$[$0-9], $$[$0-1], null, null, null, this._$.first_line, this._$.first_column+1, false);
    
break;
case 19:

        this.$ = instance_array($$[$0-13], $$[$0-14], $$[$0-4], null, $$[$0-1], null, this._$.first_line, this._$.first_column+1, true);
    
break;
case 20:

        this.$ = instance_array($$[$0-6], $$[$0-7], null, $$[$0-1], null, null, this._$.first_line, this._$.first_column+1, false);
    
break;
case 21:

        this.$ = instance_array($$[$0-14], $$[$0-15], null, $$[$0-6], null, $$[$0-2], this._$.first_line, this._$.first_column+1, true);
    
break;
case 22:
 this.$ = modify_array($$[$0-5], $$[$0], $$[$0-3]) 
break;
case 23:
 this.$ = modify_array($$[$0-8], $$[$0], $$[$0-6], $$[$0-3]) 
break;
case 24:
 this.$ = 'ENTERO'; 
break;
case 25:
 this.$ = 'DOUBLE'; 
break;
case 26:
 this.$ = 'BOOL'; 
break;
case 27:
 this.$ = 'CHAR'; 
break;
case 28:
 this.$ = 'CADENA'; 
break;
case 29:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'SUMA', this._$.first_line, this._$.first_column+1) 
break;
case 30:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'RESTA', this._$.first_line, this._$.first_column+1) 
break;
case 31:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MULT', this._$.first_line, this._$.first_column+1) 
break;
case 32:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'DIV', this._$.first_line, this._$.first_column+1) 
break;
case 33:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MOD', this._$.first_line, this._$.first_column+1) 
break;
case 34:
 this.$ = nuevaOpBinaria($$[$0-5], $$[$0-3], 'POW', this._$.first_line, this._$.first_column+1) 
break;
case 35:
 this.$ = casteo($$[$0-2],$$[$0]); 
break;
case 40:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'IGUALACION', this._$.first_line, this._$.first_column+1) 
break;
case 41:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'DIF', this._$.first_line, this._$.first_column+1) 
break;
case 42:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MENORQUE', this._$.first_line, this._$.first_column+1) 
break;
case 43:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MENORIGUALQUE', this._$.first_line, this._$.first_column+1) 
break;
case 44:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MAYORQUE', this._$.first_line, this._$.first_column+1) 
break;
case 45:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'MAYORIGUALQUE', this._$.first_line, this._$.first_column+1) 
break;
case 46:
 var result = OpTernario(nuevaOpTernaria($$[$0-4], $$[$0-2], $$[$0], 'IFSHORT', this._$.first_line, this._$.first_column+1)) 
                                                                this.$ = nuevoValor(result.valor, result.tipo, this._$.first_line, this._$.first_column+1)
break;
case 47:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'AND', this._$.first_line, this._$.first_column+1) 
break;
case 48:
 this.$ = nuevaOpBinaria($$[$0-2], $$[$0], 'OR', this._$.first_line, this._$.first_column+1) 
break;
case 49:
 this.$ = nuevaOpBinaria($$[$0], null, 'NOT', this._$.first_line, this._$.first_column+1) 
break;
case 50:
 this.$ = nuevaOpUnit($$[$0],'PRINT',this._$.first_line, this._$.first_column+1) 
break;
case 51:
 this.$ = nuevaOpUnit($$[$0-2],'PRINT',this._$.first_line, this._$.first_column+1,true) 
break;
case 53:
 this.$ = []; 
break;
case 54:
 this.$ = sentenciaControl($$[$0-2], 'sent_if', $$[$0]) 
break;
case 55: case 56:
 this.$ = sentenciaControl($$[$0-4], 'sent_if',$$[$0-2], $$[$0]) 
break;
case 57:
 this.$ = sentenciaControl($$[$0-4], 'sent_switch', $$[$0-1])
break;
case 58:
 this.$ = sentenciaControl($$[$0-5], 'sent_switch', $$[$0-2], $$[$0-1]) 
break;
case 59:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 61:
 this.$ = { case: $$[$0-2], bloque: $$[$0], breakval: false} 
break;
case 62:
 this.$ = { case: $$[$0-4], bloque: $$[$0-2], breakval: true} 
break;
case 63:
 this.$ = { case: 'DEFAULT', bloque: $$[$0] } 
break;
case 64:
 this.$ = sent_while($$[$0-2], $$[$0], 'sent_while') 
break;
case 65:
 this.$ = sent_while($$[$0-1], $$[$0-4], 'sent_dowhile') 
break;
case 66:
 this.$ = sent_for($$[$0-6], $$[$0-4], $$[$0-2], $$[$0]) 
break;
case 67:
 this.$ = nuevaOpUnit($$[$0-1], 'INCREASE', this._$.first_line, this._$.first_column+1) 
break;
case 68:
 this.$ = nuevaOpUnit($$[$0-1], 'DECREASE', this._$.first_line, this._$.first_column+1) 
break;
case 69:
 this.$ = nuevoValor($$[$0], 'ENTERO', this._$.first_line, this._$.first_column+1) 
break;
case 70:
 this.$ = nuevoValor($$[$0], 'DOUBLE', this._$.first_line, this._$.first_column+1) 
break;
case 71:
 this.$ = nuevoValor($$[$0], 'CADENA', this._$.first_line, this._$.first_column+1) 
break;
case 72:
 this.$ = nuevoValor($$[$0], 'CHAR', this._$.first_line, this._$.first_column+1) 
break;
case 73:
 this.$ = nuevoValor($$[$0], 'BOOL', this._$.first_line, this._$.first_column+1) 
break;
case 74:
 this.$ = nuevoValor($$[$0], 'ID', this._$.first_line, this._$.first_column+1) 
break;
case 75:
 this.$ = nuevoValor($$[$0-3], 'ARRAY', this._$.first_line, this._$.first_column+1, $$[$0-1]) 
break;
case 76:
 this.$ = nuevoValor($$[$0-6], 'ARRAY', this._$.first_line, this._$.first_column+1, $$[$0-4], $$[$0-1])
break;
case 79:
 this.$ = true;   
break;
case 80:
 this.$ = false;  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,21:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,54:$Va,60:$Vb,62:$Vc,69:$Vd,70:$Ve,71:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{1:[3]},{2:$V0,5:[1,41],6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,21:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,54:$Va,60:$Vb,62:$Vc,69:$Vd,70:$Ve,71:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($Vm,[2,3]),{8:[1,43]},{8:[1,44]},{8:[1,45],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),o($Vm,[2,10]),{8:[1,60]},{8:[1,61]},{8:[1,62]},{18:63,21:[1,64]},o($VB,$VC,{22:[1,65],72:$VD,73:$VE}),{37:[1,68]},{17:69,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},o($VF,[2,36]),o($VF,$VG),o($VF,[2,38]),o($VF,[2,39]),{37:[1,70]},{37:[1,71]},{37:[1,72]},{37:[1,73]},{57:74,58:$VH},{55:[1,76]},o($VI,[2,24]),o($VI,[2,25]),o($VI,[2,26]),o($VI,[2,27]),o($VI,[2,28]),{10:77,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($VF,[2,69]),o($VF,[2,70]),o($VF,[2,71]),o($VF,[2,72]),o($VF,[2,73]),o($VF,[2,79]),o($VF,[2,80]),{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),{10:79,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:80,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:81,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:82,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:83,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:84,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:85,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:86,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:87,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:88,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:89,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:90,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:91,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:92,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($Vm,[2,11]),o($Vm,[2,12]),o($Vm,[2,13]),{8:[2,14],19:[1,93],20:[1,94]},o($VK,$VL,{22:[1,95]}),{10:96,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($VF,[2,67]),o($VF,[2,68]),{10:97,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{38:[1,98]},{10:99,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:100,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:101,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{7:102,17:103,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},{69:[1,104]},{2:$V0,4:105,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,21:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,54:$Va,59:[1,106],60:$Vb,62:$Vc,69:$Vd,70:$Ve,71:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:107,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o([8,20,23,38,50,55],[2,49],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA}),o($VF,$VC,{22:$VM,72:$VD,73:$VE}),o($VN,[2,29],{33:$Vp,34:$Vq,35:$Vr}),o($VN,[2,30],{33:$Vp,34:$Vq,35:$Vr}),o($VO,[2,31],{35:$Vr}),o($VO,[2,32],{35:$Vr}),o($VF,[2,33]),o($VP,[2,40],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr}),o($VP,[2,41],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr}),o($VP,[2,42],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr}),o($VP,[2,43],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr}),o($VP,[2,44],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr}),o($VP,[2,45],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr}),{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:[1,109],51:$Vz,52:$VA},o($VQ,[2,47],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy}),o([8,20,23,38,50,52,55],[2,48],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz}),{10:110,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{21:[1,111]},{23:[1,112]},{23:[1,113],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{20:[1,114],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{10:115,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,38:[1,116],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,38:[1,117],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,38:[1,118],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{8:[1,119]},{18:63,21:[1,120]},{37:[1,121]},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,21:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,54:$Va,59:[1,122],60:$Vb,62:$Vc,69:$Vd,70:$Ve,71:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($VR,[2,53]),{8:[2,50],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA,55:[1,123]},{10:124,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:125,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{8:[2,15],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},o($VK,[2,16]),{19:[1,126],22:[1,127]},o($VB,$VS,{19:[1,128],22:[1,129]}),{10:130,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($VF,[2,35]),{57:131,58:$VH},{58:[1,132]},{57:133,58:$VH},{10:135,21:$VJ,36:$V7,37:$V8,39:18,40:134,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($VK,$VL),{10:136,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($VR,[2,52]),{56:[1,137]},{23:[1,138],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},o($VQ,[2,46],{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),{22:[1,140],24:[1,139]},{23:[1,141]},{10:142,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{10:143,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,38:[1,144],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},o($Vm,[2,54],{61:[1,145]}),{63:146,65:147,66:$VT},o($Vm,[2,64]),o([31,32,33,34,35,43,44,45,46,47,48,49,51,52],$VG,{8:[1,149]}),{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,38:[1,150],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{8:[2,51]},o($VF,$VS,{22:[1,151]}),{17:152,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},{21:$VU,25:153,42:154,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{19:[1,156]},{8:[2,22],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{23:[1,157],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},o($VF,[2,34]),{11:159,57:158,58:$VH,60:$Vb},{59:[1,160],64:161,65:162,66:$VT,68:[1,163]},o($VV,[2,60]),{10:164,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{21:[1,166],39:165},{8:[2,65]},{10:167,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{22:[1,168]},{20:$VW,23:[1,169]},o($VX,[2,78]),o($VX,$VC,{22:$VM}),{22:[1,172],24:[1,171]},o($VB,$VY,{19:[1,173]}),o($Vm,[2,55]),o($Vm,[2,56]),o($Vm,[2,57]),{59:[1,174]},o($VV,[2,59]),{50:[1,175]},{31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:[1,176],51:$Vz,52:$VA},{38:[1,177]},{72:$VD,73:$VE},{23:[1,178],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{10:179,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{8:[2,20]},{21:$VU,42:180,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{17:181,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},{22:[1,182]},{10:183,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($Vm,[2,58]),{2:$V0,4:184,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,21:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,54:$Va,60:$Vb,62:$Vc,69:$Vd,70:$Ve,71:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{2:$V0,4:185,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,21:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,54:$Va,60:$Vb,62:$Vc,69:$Vd,70:$Ve,71:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{57:186,58:$VH},o($VF,$VY),{23:[1,187],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},o($VX,[2,77]),{22:[1,188]},{21:$VU,25:189,42:154,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{8:[2,23],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,21:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,54:$Va,59:[2,63],60:$Vb,62:$Vc,69:$Vd,70:$Ve,71:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},o($VV,[2,61],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:14,39:18,40:19,41:20,42:21,78:38,6:42,2:$V0,21:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6,36:$V7,37:$V8,53:$V9,54:$Va,60:$Vb,62:$Vc,67:[1,190],69:$Vd,70:$Ve,71:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,79:$Vk,80:$Vl}),o($Vm,[2,66]),{8:[2,18]},{10:191,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{20:$VW,23:[1,192]},{8:[1,193]},{23:[1,194],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{20:[1,195]},o($VV,[2,62]),{22:[1,196]},{22:[1,197]},{10:198,21:$VJ,36:$V7,37:$V8,39:18,40:19,41:20,42:21,53:$V9,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{21:$VU,25:199,42:154,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:38,79:$Vk,80:$Vl},{23:[1,200],31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:$VA},{20:$VW,23:[1,201]},{8:[2,19]},{23:[1,202]},{8:[2,21]}],
defaultActions: {41:[2,1],137:[2,51],150:[2,65],169:[2,20],187:[2,18],200:[2,19],202:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // Importar librerÃ­as y variables
        const Aritmetica = require("../Util/Aritmetica");
        const OpRelacional = require('../Util/Comparaciones/Relacionales');
        const OpTernario = require('../Util/Comparaciones/Ternario');
        var cadena = '';
        var errores = [];


    function nuevoValor(valor, tipoValor, linea, columna, pos1=null, pos2=null) {
        let obj = {
            valor: valor,
            tipoValor: tipoValor,
            linea: linea,
            columna: columna,
            pos1: pos1,
            pos2: pos2
        }
        return obj;
    }

    function nuevaOpUnit(valor,tipoOperacion,linea,columna,comodin=false){
        let obj = {
            valor: valor,
            tipoOperacion: tipoOperacion,
            comodin: comodin,
            linea: linea,
            columna: columna
        }
        return obj;
    }

    function nuevaOpBinaria(valor1, valor2, tipoOperacion, linea, columna) {
        let obj = {
            valor1: valor1,
            valor2: valor2,
            tipoOperacion: tipoOperacion,
            linea: linea,
            columna: columna
        }
        return obj;
    }

    function nuevaOpTernaria(condicion, expresion1, expresion2, tipoOperacion, linea, columna) {
        let obj = {
            condicion: condicion,
            expresion1: expresion1,
            expresion2: expresion2,
            tipoOperacion: tipoOperacion,
            linea: linea,
            columna: columna
        }
        return obj;
    }

    function sentenciaControl(condicion, tipoOperacion, bloque, elseblock=null) {
        let obj = {
            condicion: condicion,
            tipoOperacion: tipoOperacion,
            bloque: bloque,
            elseblock: elseblock
        }
        return obj;
    }

    function instance_var(ids, tipo, linea, columna, valor = null){
        let obj = {
            ids: ids,
            tipo: tipo,
            valor: valor,
            tipoOperacion: "declaracion_var",
            linea: linea,
            columna: columna
        }
        return obj
    }

    function instance_array(id, tipo, size, valores, size2, valores2, fila, columna, cuadrada){
        let obj = {
            id: id,
            tipo: tipo,
            size: size,
            valores: valores,
            size2: size2,
            valores2: valores2,
            tipoOperacion: 'declaracion_array',
            fila: fila,
            columna: columna,
            cuadrada: cuadrada
        }
        return obj;
    }

    function modify_array(id, valor, pos1, pos2=null){
        let obj = {
            id: id,
            valor: valor,
            tipoOperacion: 'modify_array',
            pos1: pos1,
            pos2: pos2
        }
        return obj;
    }

    function sent_while(condicion, instrucciones, tipoOperacion){
        let obj = {
            condicion: condicion,
            instrucciones: instrucciones,
            tipoOperacion: tipoOperacion
        }
        return obj;
    }

    function sent_for(declaracion, condicion, update, instrucciones){
        let obj = {
            declaracion: declaracion,
            condicion: condicion,
            update: update,
            tipoOperacion: 'sent_for',
            instrucciones: instrucciones
        }
        return obj;
    }

    function casteo(tipo, valor) {
        if (tipo === 'DOUBLE' && valor.tipoValor === 'ENTERO'){
            valor.valor = valor.valor + 0.0
            return valor;
        }
        else if (tipo === 'ENTERO' && valor.tipoValor === 'DOUBLE'){
            valor.valor = Math.round(valor.valor);
            return valor;
        }
        else if (tipo === 'STRING' && typeof valor == 'number'){
            valor.valor.toString();
            return valor;
        }
        else if (tipo === 'CHAR' && valor.tipoValor === 'ENTERO'){
            valor.valor = String.fromCharCode(valor.valor)
            return valor
        }
        else if (tipo === 'ENTERO' && valor.tipoValor === 'CHAR'){
            valor.valor = valor.valor.charCodeAt(0);
            return valor
        }
        else if (tipo === 'DOUBLE' && valor.tipoValor === 'CHAR'){
            valor.valor = valor.valor.charCodeAt(0) + 0.0;
            return valor
        }
        else {
            return undefined;
        }
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios en blanco
break;
case 1:   
break;
case 2:   
break;
case 3: console.log("ENTRO A DOBLE IGUAL"); return 43; 
break;
case 4: return 44; 
break;
case 5: return 46; 
break;
case 6: return 48; 
break;
case 7: return 52; 
break;
case 8: return 51; 
break;
case 9: return 53; 
break;
case 10: return 55; 
break;
case 11: return 72; 
break;
case 12: return 73; 
break;
case 13: return 26; 
break;
case 14: return 27; 
break;
case 15: return 28; 
break;
case 16: return 29; 
break;
case 17: return 30; 
break;
case 18: return 19; 
break;
case 19: return 50 
break;
case 20: return 79; 
break;
case 21: return 80; 
break;
case 22: return 20; 
break;
case 23: return 8; 
break;
case 24: return 31; 
break;
case 25: return 32; 
break;
case 26: return 33; 
break;
case 27: return 34; 
break;
case 28: return 35; 
break;
case 29: return 36; 
break;
case 30: return 37; 
break;
case 31: return 38; 
break;
case 32: return 45; 
break;
case 33: return 47; 
break;
case 34: return 58; 
break;
case 35: return 59; 
break;
case 36: return 22; 
break;
case 37: return 23; 
break;
case 38: return 49; 
break;
case 39: return 54; 
break;
case 40: return 56; 
break;
case 41: return 60; 
break;
case 42: return 61; 
break;
case 43: return 24; 
break;
case 44: return 62; 
break;
case 45: return 66; 
break;
case 46: return 68; 
break;
case 47: return 67; 
break;
case 48: return 70; 
break;
case 49: return 69; 
break;
case 50: return 71; 
break;
case 51: console.log('Token: ID, Valor: ' + yy_.yytext); return 21; 
break;
case 52: console.log('Token: DECIMAL, Valor: ' + yy_.yytext); return 75; 
break;
case 53: console.log('Token: ENTERO, Valor: ' + yy_.yytext); return 74; 
break;
case 54: cadena = ''; this.begin("string"); 
break;
case 55: cadena += yy_.yytext; 
break;
case 56: cadena += "\""; 
break;
case 57: cadena += "\n"; 
break;
case 58: cadena += " "; 
break;
case 59: cadena += "\t"; 
break;
case 60: cadena += "\\"; 
break;
case 61: cadena += "\'"; 
break;
case 62: cadena += "\r"; 
break;
case 63: yy_.yytext = cadena; this.popState(); console.log('Token: CADENA, Valor: ' + yy_.yytext); return 76; 
break;
case 64: this.begin("character"); 
break;
case 65: return 77;
break;
case 66: return 77; 
break;
case 67: return 77; 
break;
case 68: return 77; 
break;
case 69: return 77; 
break;
case 70: this.popState(); 
break;
case 71:return 5;
break;
case 72:  errores.push({tipo: "Lexico", error: 'El simbolo "'+yy_.yytext+'" no pertenece al lenguaje', linea: yy_.yylloc.first_line, columna : yy_.yylloc.first_column+1})  
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:<<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:=)/i,/^(?::)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:pow\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:<)/i,/^(?:>)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:new\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:['])/i,/^(?:\\x[0-9a-fA-F]{2})/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\r)/i,/^(?:[^\\\'])/i,/^(?:')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[55,56,57,58,59,60,61,62,63],"inclusive":false},"character":{"rules":[65,66,67,68,69,70],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,64,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}